Java Memory management
	- Stack/Heap
	- Object obj = new Object(); // obj is a reference stored in the stack to the object created in the heap

		- Stack
			- Primitives and reference variables
			- one stack per thread
			- Variables "pop" off once the scope is over
			- Naturally managed
		- Heap 
			- Objects
			- String pool
				- for String literals
			- shared by all the threads
			- Managed by GC
	- Pass by Value
		- Java is pass value language, which means that passing a variable into a method uses the value itself rather than the variable
		- Passing a reference variable passes the reference value to the location in the heap, as such changes made to the object are persisted

	- Automatic memory management
	- Garbage collector frees up memory once it's no longer referenced
		- Daemon thread - thread running in the background
		- Removes objects without references in the heap
			- finalize() - last method called upon an object before it is garbage collected
				- usually used to close resources being used
		- Garbage collection cannot be forced but can be suggested
			- System.gc();

Strings
	- reference type, array of characters
	- immutable - cannot be changed, value of a string cannot be changed.
	- Strings are usually stored in the String pool (in the heap)
		- Special place in the heap, where strings instantiated literally are stored
		- This allows Java to reuse the same string for repeated strings
	- String s = new String("a string"); - in the heap
	- String s = "a string"; - in the string pool
	- intern() - checks if string is already in string pool, if exists returns a reference to it, if not creates an instance and returns the reference to it.

StringBuilder/StringBuffer:
	- mutable alternatives to Strings with methods that allow for manipulation (append, replace...) 
	- StringBuilder is not threadsafe - faster
	- StringBuffer is threadsafe - slower

Scanner
	- Class in Java that can be used to scan through different things
		- files, console, input streams
	- can parse inputs for different types, read entire lines/partial lines... 
	- Recommendation: use 1 scanner per input stream (System.in), can get wonky otherwise
	- Good practice: close your scanner once done using it

		